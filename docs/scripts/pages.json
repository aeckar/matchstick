[{"name":"abstract class TreeNode","description":"io.github.aeckar.parsing.state.TreeNode","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/index.html","searchKeys":["TreeNode","abstract class TreeNode","io.github.aeckar.parsing.state.TreeNode"]},{"name":"abstract override fun toString(): String","description":"io.github.aeckar.parsing.state.TreeNode.toString","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/to-string.html","searchKeys":["toString","abstract override fun toString(): String","io.github.aeckar.parsing.state.TreeNode.toString"]},{"name":"abstract val children: List<TreeNode>","description":"io.github.aeckar.parsing.state.TreeNode.children","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/children.html","searchKeys":["children","abstract val children: List<TreeNode>","io.github.aeckar.parsing.state.TreeNode.children"]},{"name":"abstract val substring: String","description":"io.github.aeckar.parsing.Substring.substring","location":"matchstick/io.github.aeckar.parsing/-substring/substring.html","searchKeys":["substring","abstract val substring: String","io.github.aeckar.parsing.Substring.substring"]},{"name":"annotation class ParserComponentDSL","description":"io.github.aeckar.parsing.dsl.ParserComponentDSL","location":"matchstick/io.github.aeckar.parsing.dsl/-parser-component-d-s-l/index.html","searchKeys":["ParserComponentDSL","annotation class ParserComponentDSL","io.github.aeckar.parsing.dsl.ParserComponentDSL"]},{"name":"class CharExpression","description":"io.github.aeckar.parsing.patterns.CharExpression","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/index.html","searchKeys":["CharExpression","class CharExpression","io.github.aeckar.parsing.patterns.CharExpression"]},{"name":"class LogicContext : RuleContext, CharSequence","description":"io.github.aeckar.parsing.LogicContext","location":"matchstick/io.github.aeckar.parsing/-logic-context/index.html","searchKeys":["LogicContext","class LogicContext : RuleContext, CharSequence","io.github.aeckar.parsing.LogicContext"]},{"name":"class MalformedPredicateException : RuntimeException","description":"io.github.aeckar.parsing.MalformedPredicateException","location":"matchstick/io.github.aeckar.parsing/-malformed-predicate-exception/index.html","searchKeys":["MalformedPredicateException","class MalformedPredicateException : RuntimeException","io.github.aeckar.parsing.MalformedPredicateException"]},{"name":"class Match","description":"io.github.aeckar.parsing.Match","location":"matchstick/io.github.aeckar.parsing/-match/index.html","searchKeys":["Match","class Match","io.github.aeckar.parsing.Match"]},{"name":"class MismatchException : RuntimeException","description":"io.github.aeckar.parsing.SyntaxTreeNode.MismatchException","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/-mismatch-exception/index.html","searchKeys":["MismatchException","class MismatchException : RuntimeException","io.github.aeckar.parsing.SyntaxTreeNode.MismatchException"]},{"name":"class SyntaxTreeNode : TreeNode, Substring","description":"io.github.aeckar.parsing.SyntaxTreeNode","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/index.html","searchKeys":["SyntaxTreeNode","class SyntaxTreeNode : TreeNode, Substring","io.github.aeckar.parsing.SyntaxTreeNode"]},{"name":"class TextExpression","description":"io.github.aeckar.parsing.patterns.TextExpression","location":"matchstick/io.github.aeckar.parsing.patterns/-text-expression/index.html","searchKeys":["TextExpression","class TextExpression","io.github.aeckar.parsing.patterns.TextExpression"]},{"name":"class TransformContext<R> : Substring","description":"io.github.aeckar.parsing.TransformContext","location":"matchstick/io.github.aeckar.parsing/-transform-context/index.html","searchKeys":["TransformContext","class TransformContext<R> : Substring","io.github.aeckar.parsing.TransformContext"]},{"name":"class TransformMismatchException : RuntimeException","description":"io.github.aeckar.parsing.TransformMismatchException","location":"matchstick/io.github.aeckar.parsing/-transform-mismatch-exception/index.html","searchKeys":["TransformMismatchException","class TransformMismatchException : RuntimeException","io.github.aeckar.parsing.TransformMismatchException"]},{"name":"class TransformTraversalException : RuntimeException","description":"io.github.aeckar.parsing.TransformTraversalException","location":"matchstick/io.github.aeckar.parsing/-transform-traversal-exception/index.html","searchKeys":["TransformTraversalException","class TransformTraversalException : RuntimeException","io.github.aeckar.parsing.TransformTraversalException"]},{"name":"constructor()","description":"io.github.aeckar.parsing.state.TreeNode.TreeNode","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-tree-node.html","searchKeys":["TreeNode","constructor()","io.github.aeckar.parsing.state.TreeNode.TreeNode"]},{"name":"constructor(chars: String)","description":"io.github.aeckar.parsing.state.TreeNode.Style.Style","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/-style.html","searchKeys":["Style","constructor(chars: String)","io.github.aeckar.parsing.state.TreeNode.Style.Style"]},{"name":"constructor(vertical: Char, horizontal: Char, turnstile: Char, corner: Char)","description":"io.github.aeckar.parsing.state.TreeNode.Style.Style","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/-style.html","searchKeys":["Style","constructor(vertical: Char, horizontal: Char, turnstile: Char, corner: Char)","io.github.aeckar.parsing.state.TreeNode.Style.Style"]},{"name":"data class Style(val vertical: Char, val horizontal: Char, val turnstile: Char, val corner: Char)","description":"io.github.aeckar.parsing.state.TreeNode.Style","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/index.html","searchKeys":["Style","data class Style(val vertical: Char, val horizontal: Char, val turnstile: Char, val corner: Char)","io.github.aeckar.parsing.state.TreeNode.Style"]},{"name":"fun <R> Parser<R>.parse(input: CharSequence, state: R, delimiter: Matcher = Matcher.emptyString): R","description":"io.github.aeckar.parsing.parse","location":"matchstick/io.github.aeckar.parsing/parse.html","searchKeys":["parse","fun <R> Parser<R>.parse(input: CharSequence, state: R, delimiter: Matcher = Matcher.emptyString): R","io.github.aeckar.parsing.parse"]},{"name":"fun <R> actionOn(): (ActionScope<R>) -> Transform<R>","description":"io.github.aeckar.parsing.dsl.actionOn","location":"matchstick/io.github.aeckar.parsing.dsl/action-on.html","searchKeys":["actionOn","fun <R> actionOn(): (ActionScope<R>) -> Transform<R>","io.github.aeckar.parsing.dsl.actionOn"]},{"name":"fun <R> mapOn(): (MapScope<R>) -> Transform<R>","description":"io.github.aeckar.parsing.dsl.mapOn","location":"matchstick/io.github.aeckar.parsing.dsl/map-on.html","searchKeys":["mapOn","fun <R> mapOn(): (MapScope<R>) -> Transform<R>","io.github.aeckar.parsing.dsl.mapOn"]},{"name":"fun Matcher.match(sequence: CharSequence, delimiter: Matcher = Matcher.emptyString): MutableList<Match>","description":"io.github.aeckar.parsing.match","location":"matchstick/io.github.aeckar.parsing/match.html","searchKeys":["match","fun Matcher.match(sequence: CharSequence, delimiter: Matcher = Matcher.emptyString): MutableList<Match>","io.github.aeckar.parsing.match"]},{"name":"fun Matcher.treeify(sequence: CharSequence, delimiter: Matcher = Matcher.emptyString): SyntaxTreeNode","description":"io.github.aeckar.parsing.treeify","location":"matchstick/io.github.aeckar.parsing/treeify.html","searchKeys":["treeify","fun Matcher.treeify(sequence: CharSequence, delimiter: Matcher = Matcher.emptyString): SyntaxTreeNode","io.github.aeckar.parsing.treeify"]},{"name":"fun char(): Matcher","description":"io.github.aeckar.parsing.RuleContext.char","location":"matchstick/io.github.aeckar.parsing/-rule-context/char.html","searchKeys":["char","fun char(): Matcher","io.github.aeckar.parsing.RuleContext.char"]},{"name":"fun char(c: Char): Matcher","description":"io.github.aeckar.parsing.RuleContext.char","location":"matchstick/io.github.aeckar.parsing/-rule-context/char.html","searchKeys":["char","fun char(c: Char): Matcher","io.github.aeckar.parsing.RuleContext.char"]},{"name":"fun charBy(expr: String): Matcher","description":"io.github.aeckar.parsing.RuleContext.charBy","location":"matchstick/io.github.aeckar.parsing/-rule-context/char-by.html","searchKeys":["charBy","fun charBy(expr: String): Matcher","io.github.aeckar.parsing.RuleContext.charBy"]},{"name":"fun charIn(chars: Collection<Char>): Matcher","description":"io.github.aeckar.parsing.RuleContext.charIn","location":"matchstick/io.github.aeckar.parsing/-rule-context/char-in.html","searchKeys":["charIn","fun charIn(chars: Collection<Char>): Matcher","io.github.aeckar.parsing.RuleContext.charIn"]},{"name":"fun charIn(chars: String): Matcher","description":"io.github.aeckar.parsing.RuleContext.charIn","location":"matchstick/io.github.aeckar.parsing/-rule-context/char-in.html","searchKeys":["charIn","fun charIn(chars: String): Matcher","io.github.aeckar.parsing.RuleContext.charIn"]},{"name":"fun charNotIn(chars: Collection<Char>): Matcher","description":"io.github.aeckar.parsing.RuleContext.charNotIn","location":"matchstick/io.github.aeckar.parsing/-rule-context/char-not-in.html","searchKeys":["charNotIn","fun charNotIn(chars: Collection<Char>): Matcher","io.github.aeckar.parsing.RuleContext.charNotIn"]},{"name":"fun charNotIn(chars: String): Matcher","description":"io.github.aeckar.parsing.RuleContext.charNotIn","location":"matchstick/io.github.aeckar.parsing/-rule-context/char-not-in.html","searchKeys":["charNotIn","fun charNotIn(chars: String): Matcher","io.github.aeckar.parsing.RuleContext.charNotIn"]},{"name":"fun consume(length: Int)","description":"io.github.aeckar.parsing.LogicContext.consume","location":"matchstick/io.github.aeckar.parsing/-logic-context/consume.html","searchKeys":["consume","fun consume(length: Int)","io.github.aeckar.parsing.LogicContext.consume"]},{"name":"fun descend()","description":"io.github.aeckar.parsing.TransformContext.descend","location":"matchstick/io.github.aeckar.parsing/-transform-context/descend.html","searchKeys":["descend","fun descend()","io.github.aeckar.parsing.TransformContext.descend"]},{"name":"fun fail(): Nothing","description":"io.github.aeckar.parsing.LogicContext.fail","location":"matchstick/io.github.aeckar.parsing/-logic-context/fail.html","searchKeys":["fail","fun fail(): Nothing","io.github.aeckar.parsing.LogicContext.fail"]},{"name":"fun include(length: Int)","description":"io.github.aeckar.parsing.LogicContext.include","location":"matchstick/io.github.aeckar.parsing/-logic-context/include.html","searchKeys":["include","fun include(length: Int)","io.github.aeckar.parsing.LogicContext.include"]},{"name":"fun isYield(): Boolean","description":"io.github.aeckar.parsing.SyntaxTreeNode.isYield","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/is-yield.html","searchKeys":["isYield","fun isYield(): Boolean","io.github.aeckar.parsing.SyntaxTreeNode.isYield"]},{"name":"fun lengthByChar(expr: String): Int","description":"io.github.aeckar.parsing.LogicContext.lengthByChar","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-by-char.html","searchKeys":["lengthByChar","fun lengthByChar(expr: String): Int","io.github.aeckar.parsing.LogicContext.lengthByChar"]},{"name":"fun lengthByText(expr: String): Int","description":"io.github.aeckar.parsing.LogicContext.lengthByText","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-by-text.html","searchKeys":["lengthByText","fun lengthByText(expr: String): Int","io.github.aeckar.parsing.LogicContext.lengthByText"]},{"name":"fun lengthOf(c: Char): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOf","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of.html","searchKeys":["lengthOf","fun lengthOf(c: Char): Int","io.github.aeckar.parsing.LogicContext.lengthOf"]},{"name":"fun lengthOf(matcher: Matcher): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOf","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of.html","searchKeys":["lengthOf","fun lengthOf(matcher: Matcher): Int","io.github.aeckar.parsing.LogicContext.lengthOf"]},{"name":"fun lengthOf(substring: String): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOf","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of.html","searchKeys":["lengthOf","fun lengthOf(substring: String): Int","io.github.aeckar.parsing.LogicContext.lengthOf"]},{"name":"fun lengthOfFirst(chars: Collection<Char>): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOfFirst","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of-first.html","searchKeys":["lengthOfFirst","fun lengthOfFirst(chars: Collection<Char>): Int","io.github.aeckar.parsing.LogicContext.lengthOfFirst"]},{"name":"fun lengthOfFirst(chars: String): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOfFirst","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of-first.html","searchKeys":["lengthOfFirst","fun lengthOfFirst(chars: String): Int","io.github.aeckar.parsing.LogicContext.lengthOfFirst"]},{"name":"fun lengthOfFirst(substrings: Collection<String>): Int","description":"io.github.aeckar.parsing.LogicContext.lengthOfFirst","location":"matchstick/io.github.aeckar.parsing/-logic-context/length-of-first.html","searchKeys":["lengthOfFirst","fun lengthOfFirst(substrings: Collection<String>): Int","io.github.aeckar.parsing.LogicContext.lengthOfFirst"]},{"name":"fun matcher(): Matcher","description":"io.github.aeckar.parsing.SyntaxTreeNode.matcher","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/matcher.html","searchKeys":["matcher","fun matcher(): Matcher","io.github.aeckar.parsing.SyntaxTreeNode.matcher"]},{"name":"fun matcher(scope: LogicScope): Matcher","description":"io.github.aeckar.parsing.dsl.matcher","location":"matchstick/io.github.aeckar.parsing.dsl/matcher.html","searchKeys":["matcher","fun matcher(scope: LogicScope): Matcher","io.github.aeckar.parsing.dsl.matcher"]},{"name":"fun maybe(subRule: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.maybe","location":"matchstick/io.github.aeckar.parsing/-rule-context/maybe.html","searchKeys":["maybe","fun maybe(subRule: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.maybe"]},{"name":"fun of(input: CharSequence, matches: List<Match>): SyntaxTreeNode","description":"io.github.aeckar.parsing.SyntaxTreeNode.Companion.of","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/-companion/of.html","searchKeys":["of","fun of(input: CharSequence, matches: List<Match>): SyntaxTreeNode","io.github.aeckar.parsing.SyntaxTreeNode.Companion.of"]},{"name":"fun oneOrMore(subRule: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.oneOrMore","location":"matchstick/io.github.aeckar.parsing/-rule-context/one-or-more.html","searchKeys":["oneOrMore","fun oneOrMore(subRule: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.oneOrMore"]},{"name":"fun oneOrSpread(subRule: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.oneOrSpread","location":"matchstick/io.github.aeckar.parsing/-rule-context/one-or-spread.html","searchKeys":["oneOrSpread","fun oneOrSpread(subRule: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.oneOrSpread"]},{"name":"fun remaining(): CharIterator","description":"io.github.aeckar.parsing.LogicContext.remaining","location":"matchstick/io.github.aeckar.parsing/-logic-context/remaining.html","searchKeys":["remaining","fun remaining(): CharIterator","io.github.aeckar.parsing.LogicContext.remaining"]},{"name":"fun rule(scope: RuleScope): Matcher","description":"io.github.aeckar.parsing.dsl.rule","location":"matchstick/io.github.aeckar.parsing.dsl/rule.html","searchKeys":["rule","fun rule(scope: RuleScope): Matcher","io.github.aeckar.parsing.dsl.rule"]},{"name":"fun text(substring: String): Matcher","description":"io.github.aeckar.parsing.RuleContext.text","location":"matchstick/io.github.aeckar.parsing/-rule-context/text.html","searchKeys":["text","fun text(substring: String): Matcher","io.github.aeckar.parsing.RuleContext.text"]},{"name":"fun textBy(expr: String): Matcher","description":"io.github.aeckar.parsing.RuleContext.textBy","location":"matchstick/io.github.aeckar.parsing/-rule-context/text-by.html","searchKeys":["textBy","fun textBy(expr: String): Matcher","io.github.aeckar.parsing.RuleContext.textBy"]},{"name":"fun textIn(substrings: Collection<String>): Matcher","description":"io.github.aeckar.parsing.RuleContext.textIn","location":"matchstick/io.github.aeckar.parsing/-rule-context/text-in.html","searchKeys":["textIn","fun textIn(substrings: Collection<String>): Matcher","io.github.aeckar.parsing.RuleContext.textIn"]},{"name":"fun treeString(style: TreeNode.Style = Style.UTF_8, lineSeparator: String = \"\"): String","description":"io.github.aeckar.parsing.state.TreeNode.treeString","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/tree-string.html","searchKeys":["treeString","fun treeString(style: TreeNode.Style = Style.UTF_8, lineSeparator: String = \"\"): String","io.github.aeckar.parsing.state.TreeNode.treeString"]},{"name":"fun yield(length: Int)","description":"io.github.aeckar.parsing.LogicContext.yield","location":"matchstick/io.github.aeckar.parsing/-logic-context/yield.html","searchKeys":["yield","fun yield(length: Int)","io.github.aeckar.parsing.LogicContext.yield"]},{"name":"fun zeroOrMore(subRule: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.zeroOrMore","location":"matchstick/io.github.aeckar.parsing/-rule-context/zero-or-more.html","searchKeys":["zeroOrMore","fun zeroOrMore(subRule: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.zeroOrMore"]},{"name":"fun zeroOrSpread(subRule: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.zeroOrSpread","location":"matchstick/io.github.aeckar.parsing/-rule-context/zero-or-spread.html","searchKeys":["zeroOrSpread","fun zeroOrSpread(subRule: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.zeroOrSpread"]},{"name":"infix fun <R> Matcher.with(transform: Transform<R>): Parser<R>","description":"io.github.aeckar.parsing.dsl.with","location":"matchstick/io.github.aeckar.parsing.dsl/with.html","searchKeys":["with","infix fun <R> Matcher.with(transform: Transform<R>): Parser<R>","io.github.aeckar.parsing.dsl.with"]},{"name":"infix fun <R> Parser<R>.named(id: String): Parser<R>","description":"io.github.aeckar.parsing.dsl.named","location":"matchstick/io.github.aeckar.parsing.dsl/named.html","searchKeys":["named","infix fun <R> Parser<R>.named(id: String): Parser<R>","io.github.aeckar.parsing.dsl.named"]},{"name":"infix fun Matcher.named(id: String): Matcher","description":"io.github.aeckar.parsing.dsl.named","location":"matchstick/io.github.aeckar.parsing.dsl/named.html","searchKeys":["named","infix fun Matcher.named(id: String): Matcher","io.github.aeckar.parsing.dsl.named"]},{"name":"infix fun Matcher.or(other: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.or","location":"matchstick/io.github.aeckar.parsing/-rule-context/or.html","searchKeys":["or","infix fun Matcher.or(other: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.or"]},{"name":"interface Unique","description":"io.github.aeckar.parsing.state.Unique","location":"matchstick/io.github.aeckar.parsing.state/-unique/index.html","searchKeys":["Unique","interface Unique","io.github.aeckar.parsing.state.Unique"]},{"name":"object Companion","description":"io.github.aeckar.parsing.Matcher.Companion","location":"matchstick/io.github.aeckar.parsing/-matcher/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.Matcher.Companion"]},{"name":"object Companion","description":"io.github.aeckar.parsing.SyntaxTreeNode.Companion","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.SyntaxTreeNode.Companion"]},{"name":"object Companion","description":"io.github.aeckar.parsing.state.TreeNode.Style.Companion","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.state.TreeNode.Style.Companion"]},{"name":"object Companion","description":"io.github.aeckar.parsing.state.Unique.Companion","location":"matchstick/io.github.aeckar.parsing.state/-unique/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.state.Unique.Companion"]},{"name":"object Grammar","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/index.html","searchKeys":["Grammar","object Grammar","io.github.aeckar.parsing.patterns.CharExpression.Grammar"]},{"name":"object Grammar","description":"io.github.aeckar.parsing.patterns.TextExpression.Grammar","location":"matchstick/io.github.aeckar.parsing.patterns/-text-expression/-grammar/index.html","searchKeys":["Grammar","object Grammar","io.github.aeckar.parsing.patterns.TextExpression.Grammar"]},{"name":"open class RuleContext","description":"io.github.aeckar.parsing.RuleContext","location":"matchstick/io.github.aeckar.parsing/-rule-context/index.html","searchKeys":["RuleContext","open class RuleContext","io.github.aeckar.parsing.RuleContext"]},{"name":"open operator override fun get(index: Int): Char","description":"io.github.aeckar.parsing.Substring.get","location":"matchstick/io.github.aeckar.parsing/-substring/get.html","searchKeys":["get","open operator override fun get(index: Int): Char","io.github.aeckar.parsing.Substring.get"]},{"name":"open override fun subSequence(startIndex: Int, endIndex: Int): CharSequence","description":"io.github.aeckar.parsing.Substring.subSequence","location":"matchstick/io.github.aeckar.parsing/-substring/sub-sequence.html","searchKeys":["subSequence","open override fun subSequence(startIndex: Int, endIndex: Int): CharSequence","io.github.aeckar.parsing.Substring.subSequence"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.Match.toString","location":"matchstick/io.github.aeckar.parsing/-match/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.Match.toString"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.SyntaxTreeNode.toString","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.SyntaxTreeNode.toString"]},{"name":"open override val children: List<SyntaxTreeNode>","description":"io.github.aeckar.parsing.SyntaxTreeNode.children","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/children.html","searchKeys":["children","open override val children: List<SyntaxTreeNode>","io.github.aeckar.parsing.SyntaxTreeNode.children"]},{"name":"open override val length: Int","description":"io.github.aeckar.parsing.Substring.length","location":"matchstick/io.github.aeckar.parsing/-substring/length.html","searchKeys":["length","open override val length: Int","io.github.aeckar.parsing.Substring.length"]},{"name":"open override val substring: String","description":"io.github.aeckar.parsing.SyntaxTreeNode.substring","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/substring.html","searchKeys":["substring","open override val substring: String","io.github.aeckar.parsing.SyntaxTreeNode.substring"]},{"name":"open override val substring: String","description":"io.github.aeckar.parsing.TransformContext.substring","location":"matchstick/io.github.aeckar.parsing/-transform-context/substring.html","searchKeys":["substring","open override val substring: String","io.github.aeckar.parsing.TransformContext.substring"]},{"name":"open val id: String","description":"io.github.aeckar.parsing.state.Unique.id","location":"matchstick/io.github.aeckar.parsing.state/-unique/id.html","searchKeys":["id","open val id: String","io.github.aeckar.parsing.state.Unique.id"]},{"name":"operator fun <R> Parser<R>.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Parser<R>>","description":"io.github.aeckar.parsing.provideDelegate","location":"matchstick/io.github.aeckar.parsing/provide-delegate.html","searchKeys":["provideDelegate","operator fun <R> Parser<R>.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Parser<R>>","io.github.aeckar.parsing.provideDelegate"]},{"name":"operator fun <R> Transform<R>.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Transform<R>>","description":"io.github.aeckar.parsing.provideDelegate","location":"matchstick/io.github.aeckar.parsing/provide-delegate.html","searchKeys":["provideDelegate","operator fun <R> Transform<R>.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Transform<R>>","io.github.aeckar.parsing.provideDelegate"]},{"name":"operator fun Matcher.plus(other: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.plus","location":"matchstick/io.github.aeckar.parsing/-rule-context/plus.html","searchKeys":["plus","operator fun Matcher.plus(other: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.plus"]},{"name":"operator fun Matcher.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Matcher>","description":"io.github.aeckar.parsing.provideDelegate","location":"matchstick/io.github.aeckar.parsing/provide-delegate.html","searchKeys":["provideDelegate","operator fun Matcher.provideDelegate(thisRef: Any?, property: KProperty<*>): ReadOnlyProperty<Any?, Matcher>","io.github.aeckar.parsing.provideDelegate"]},{"name":"operator fun Matcher.times(other: Matcher): Matcher","description":"io.github.aeckar.parsing.RuleContext.times","location":"matchstick/io.github.aeckar.parsing/-rule-context/times.html","searchKeys":["times","operator fun Matcher.times(other: Matcher): Matcher","io.github.aeckar.parsing.RuleContext.times"]},{"name":"operator fun String.not(): String","description":"io.github.aeckar.parsing.RuleContext.not","location":"matchstick/io.github.aeckar.parsing/-rule-context/not.html","searchKeys":["not","operator fun String.not(): String","io.github.aeckar.parsing.RuleContext.not"]},{"name":"operator fun String.times(counts: Iterable<Int>): List<String>","description":"io.github.aeckar.parsing.RuleContext.times","location":"matchstick/io.github.aeckar.parsing/-rule-context/times.html","searchKeys":["times","operator fun String.times(counts: Iterable<Int>): List<String>","io.github.aeckar.parsing.RuleContext.times"]},{"name":"sealed interface Matcher : Unique","description":"io.github.aeckar.parsing.Matcher","location":"matchstick/io.github.aeckar.parsing/-matcher/index.html","searchKeys":["Matcher","sealed interface Matcher : Unique","io.github.aeckar.parsing.Matcher"]},{"name":"sealed interface Parser<T> : Matcher, Transform<T> ","description":"io.github.aeckar.parsing.Parser","location":"matchstick/io.github.aeckar.parsing/-parser/index.html","searchKeys":["Parser","sealed interface Parser<T> : Matcher, Transform<T> ","io.github.aeckar.parsing.Parser"]},{"name":"sealed interface Substring : CharSequence","description":"io.github.aeckar.parsing.Substring","location":"matchstick/io.github.aeckar.parsing/-substring/index.html","searchKeys":["Substring","sealed interface Substring : CharSequence","io.github.aeckar.parsing.Substring"]},{"name":"sealed interface Transform<R> : Unique","description":"io.github.aeckar.parsing.Transform","location":"matchstick/io.github.aeckar.parsing/-transform/index.html","searchKeys":["Transform","sealed interface Transform<R> : Unique","io.github.aeckar.parsing.Transform"]},{"name":"typealias ActionScope<R> = TransformContext<R>.() -> Unit","description":"io.github.aeckar.parsing.dsl.ActionScope","location":"matchstick/io.github.aeckar.parsing.dsl/-action-scope/index.html","searchKeys":["ActionScope","typealias ActionScope<R> = TransformContext<R>.() -> Unit","io.github.aeckar.parsing.dsl.ActionScope"]},{"name":"typealias LogicScope = LogicContext.() -> Unit","description":"io.github.aeckar.parsing.dsl.LogicScope","location":"matchstick/io.github.aeckar.parsing.dsl/-logic-scope/index.html","searchKeys":["LogicScope","typealias LogicScope = LogicContext.() -> Unit","io.github.aeckar.parsing.dsl.LogicScope"]},{"name":"typealias MapScope<R> = TransformContext<R>.() -> R","description":"io.github.aeckar.parsing.dsl.MapScope","location":"matchstick/io.github.aeckar.parsing.dsl/-map-scope/index.html","searchKeys":["MapScope","typealias MapScope<R> = TransformContext<R>.() -> R","io.github.aeckar.parsing.dsl.MapScope"]},{"name":"typealias RuleScope = RuleContext.() -> Matcher","description":"io.github.aeckar.parsing.dsl.RuleScope","location":"matchstick/io.github.aeckar.parsing.dsl/-rule-scope/index.html","searchKeys":["RuleScope","typealias RuleScope = RuleContext.() -> Matcher","io.github.aeckar.parsing.dsl.RuleScope"]},{"name":"val ASCII: TreeNode.Style","description":"io.github.aeckar.parsing.state.TreeNode.Style.Companion.ASCII","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/-companion/-a-s-c-i-i.html","searchKeys":["ASCII","val ASCII: TreeNode.Style","io.github.aeckar.parsing.state.TreeNode.Style.Companion.ASCII"]},{"name":"val UTF_8: TreeNode.Style","description":"io.github.aeckar.parsing.state.TreeNode.Style.Companion.UTF_8","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/-companion/-u-t-f_8.html","searchKeys":["UTF_8","val UTF_8: TreeNode.Style","io.github.aeckar.parsing.state.TreeNode.Style.Companion.UTF_8"]},{"name":"val begin: Int","description":"io.github.aeckar.parsing.Match.begin","location":"matchstick/io.github.aeckar.parsing/-match/begin.html","searchKeys":["begin","val begin: Int","io.github.aeckar.parsing.Match.begin"]},{"name":"val charPattern: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.charPattern","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/char-pattern.html","searchKeys":["charPattern","val charPattern: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.charPattern"]},{"name":"val charRange: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.charRange","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/char-range.html","searchKeys":["charRange","val charRange: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.charRange"]},{"name":"val charSet: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.charSet","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/char-set.html","searchKeys":["charSet","val charSet: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.charSet"]},{"name":"val choice: Int","description":"io.github.aeckar.parsing.Match.choice","location":"matchstick/io.github.aeckar.parsing/-match/choice.html","searchKeys":["choice","val choice: Int","io.github.aeckar.parsing.Match.choice"]},{"name":"val choice: Int","description":"io.github.aeckar.parsing.SyntaxTreeNode.choice","location":"matchstick/io.github.aeckar.parsing/-syntax-tree-node/choice.html","searchKeys":["choice","val choice: Int","io.github.aeckar.parsing.SyntaxTreeNode.choice"]},{"name":"val choice: Int","description":"io.github.aeckar.parsing.TransformContext.choice","location":"matchstick/io.github.aeckar.parsing/-transform-context/choice.html","searchKeys":["choice","val choice: Int","io.github.aeckar.parsing.TransformContext.choice"]},{"name":"val corner: Char","description":"io.github.aeckar.parsing.state.TreeNode.Style.corner","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/corner.html","searchKeys":["corner","val corner: Char","io.github.aeckar.parsing.state.TreeNode.Style.corner"]},{"name":"val depth: Int","description":"io.github.aeckar.parsing.Match.depth","location":"matchstick/io.github.aeckar.parsing/-match/depth.html","searchKeys":["depth","val depth: Int","io.github.aeckar.parsing.Match.depth"]},{"name":"val emptyString: Matcher","description":"io.github.aeckar.parsing.Matcher.Companion.emptyString","location":"matchstick/io.github.aeckar.parsing/-matcher/-companion/empty-string.html","searchKeys":["emptyString","val emptyString: Matcher","io.github.aeckar.parsing.Matcher.Companion.emptyString"]},{"name":"val endExclusive: Int","description":"io.github.aeckar.parsing.Match.endExclusive","location":"matchstick/io.github.aeckar.parsing/-match/end-exclusive.html","searchKeys":["endExclusive","val endExclusive: Int","io.github.aeckar.parsing.Match.endExclusive"]},{"name":"val grouping: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.grouping","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/grouping.html","searchKeys":["grouping","val grouping: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.grouping"]},{"name":"val horizontal: Char","description":"io.github.aeckar.parsing.state.TreeNode.Style.horizontal","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/horizontal.html","searchKeys":["horizontal","val horizontal: Char","io.github.aeckar.parsing.state.TreeNode.Style.horizontal"]},{"name":"val intersection: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.intersection","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/intersection.html","searchKeys":["intersection","val intersection: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.intersection"]},{"name":"val length: Int","description":"io.github.aeckar.parsing.Match.length","location":"matchstick/io.github.aeckar.parsing/-match/length.html","searchKeys":["length","val length: Int","io.github.aeckar.parsing.Match.length"]},{"name":"val matcher: Matcher?","description":"io.github.aeckar.parsing.TransformContext.matcher","location":"matchstick/io.github.aeckar.parsing/-transform-context/matcher.html","searchKeys":["matcher","val matcher: Matcher?","io.github.aeckar.parsing.TransformContext.matcher"]},{"name":"val negation: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.negation","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/negation.html","searchKeys":["negation","val negation: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.negation"]},{"name":"val prefix: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.prefix","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/prefix.html","searchKeys":["prefix","val prefix: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.prefix"]},{"name":"val singleChar: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.singleChar","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/single-char.html","searchKeys":["singleChar","val singleChar: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.singleChar"]},{"name":"val suffix: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.suffix","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/suffix.html","searchKeys":["suffix","val suffix: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.suffix"]},{"name":"val textPattern: Matcher","description":"io.github.aeckar.parsing.patterns.TextExpression.Grammar.textPattern","location":"matchstick/io.github.aeckar.parsing.patterns/-text-expression/-grammar/text-pattern.html","searchKeys":["textPattern","val textPattern: Matcher","io.github.aeckar.parsing.patterns.TextExpression.Grammar.textPattern"]},{"name":"val turnstile: Char","description":"io.github.aeckar.parsing.state.TreeNode.Style.turnstile","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/turnstile.html","searchKeys":["turnstile","val turnstile: Char","io.github.aeckar.parsing.state.TreeNode.Style.turnstile"]},{"name":"val union: Matcher","description":"io.github.aeckar.parsing.patterns.CharExpression.Grammar.union","location":"matchstick/io.github.aeckar.parsing.patterns/-char-expression/-grammar/union.html","searchKeys":["union","val union: Matcher","io.github.aeckar.parsing.patterns.CharExpression.Grammar.union"]},{"name":"val vertical: Char","description":"io.github.aeckar.parsing.state.TreeNode.Style.vertical","location":"matchstick/io.github.aeckar.parsing.state/-tree-node/-style/vertical.html","searchKeys":["vertical","val vertical: Char","io.github.aeckar.parsing.state.TreeNode.Style.vertical"]},{"name":"var children: List<SyntaxTreeNode>","description":"io.github.aeckar.parsing.TransformContext.children","location":"matchstick/io.github.aeckar.parsing/-transform-context/children.html","searchKeys":["children","var children: List<SyntaxTreeNode>","io.github.aeckar.parsing.TransformContext.children"]},{"name":"var matcher: Matcher?","description":"io.github.aeckar.parsing.Match.matcher","location":"matchstick/io.github.aeckar.parsing/-match/matcher.html","searchKeys":["matcher","var matcher: Matcher?","io.github.aeckar.parsing.Match.matcher"]},{"name":"var state: R","description":"io.github.aeckar.parsing.TransformContext.state","location":"matchstick/io.github.aeckar.parsing/-transform-context/state.html","searchKeys":["state","var state: R","io.github.aeckar.parsing.TransformContext.state"]}]